name: DevSecOps Security Scan Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: devsecops-webapp
  REGISTRY: ghcr.io
  NODE_VERSION: '18'

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      working-directory: ./webapp
      run: |
        # Check if package-lock.json exists, if not create it
        if [ ! -f package-lock.json ]; then
          echo "package-lock.json not found, generating..."
          npm install
        else
          npm ci
        fi

    - name: Run Trivy vulnerability scanner in repo mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
      continue-on-error: true

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-results.sarif') != ''
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

    - name: Run Trivy vulnerability scanner for JSON report
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'json'
        output: 'trivy-report.json'
      continue-on-error: true

    - name: Upload Trivy JSON report
      uses: actions/upload-artifact@v4
      if: always() && hashFiles('trivy-report.json') != ''
      with:
        name: trivy-security-report
        path: trivy-report.json
        retention-days: 30

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: security-scan
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./webapp
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        load: true

    - name: Run Trivy vulnerability scanner on Docker image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_IMAGE }}:latest
        format: 'table'
        exit-code: '1'
        severity: 'CRITICAL,HIGH'

    - name: Test application endpoints
      run: |
        # Start the container
        docker run -d --name test-app -p 3000:3000 ${{ env.DOCKER_IMAGE }}:latest
        
        # Wait for app to start
        echo "Waiting for application to start..."
        sleep 15
        
        # Test endpoints with retries
        for endpoint in health metrics api/time api/stats api/random; do
          echo "Testing /${endpoint} endpoint..."
          for i in {1..5}; do
            if curl -f --max-time 10 http://localhost:3000/${endpoint}; then
              echo "✅ /${endpoint} endpoint is working"
              break
            else
              echo "⚠️ Attempt $i failed for /${endpoint}, retrying..."
              sleep 5
            fi
          done
        done

    - name: Get container logs
      if: failure()
      run: |
        echo "=== Container Logs ==="
        docker logs test-app || true
        echo "=== Container Status ==="
        docker ps -a || true

    - name: Cleanup test container
      if: always()
      run: |
        docker stop test-app || true
        docker rm test-app || true

    - name: Generate security report summary
      if: always()
      run: |
        echo "## 🛡️ Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "trivy-report.json" ]; then
          # Count vulnerabilities by severity
          CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-report.json 2>/dev/null || echo "0")
          HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-report.json 2>/dev/null || echo "0")
          MEDIUM=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' trivy-report.json 2>/dev/null || echo "0")
          
          echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔴 Critical | $CRITICAL |" >> $GITHUB_STEP_SUMMARY
          echo "| 🟠 High | $HIGH |" >> $GITHUB_STEP_SUMMARY
          echo "| 🟡 Medium | $MEDIUM |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$CRITICAL" -eq 0 ] && [ "$HIGH" -eq 0 ]; then
            echo "✅ No critical or high severity vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Found $CRITICAL critical and $HIGH high severity vulnerabilities" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "❌ Security scan report not found" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 **Build Information:**" >> $GITHUB_STEP_SUMMARY
        echo "- Image: \`${{ env.DOCKER_IMAGE }}:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "- Branch: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- Commit: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY

  deploy:
    name: Deploy (Demo)
    runs-on: ubuntu-latest
    needs: [security-scan, build-and-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: demo
      url: http://localhost:3000
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy notification
      run: |
        echo "🚀 **Deployment Summary**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ All security checks passed" >> $GITHUB_STEP_SUMMARY
        echo "✅ Tests completed successfully" >> $GITHUB_STEP_SUMMARY
        echo "✅ Ready for production deployment" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
        echo "1. Pull the latest image: \`docker pull ${{ env.DOCKER_IMAGE }}:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "2. Run with: \`docker run -d -p 3000:3000 ${{ env.DOCKER_IMAGE }}:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "3. Access at: http://localhost:3000" >> $GITHUB_STEP_SUMMARY

          🚀 DevSecOps deployment completed!
          
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          **Author:** ${{ github.actor }}
          
          ✅ Security scan passed
          ✅ Tests passed
          ✅ Ready for deployment

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: always()
    
    steps:
    - name: Clean up Docker resources
      run: |
        # Remove any leftover test containers
        docker container prune -f || true
        
        # Clean up dangling images
        docker image prune -f || true
        
        echo "✅ Cleanup completed"