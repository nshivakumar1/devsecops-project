name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '20'

jobs:
  # Code quality and linting
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: webapp/package-lock.json

      - name: Install dependencies
        working-directory: ./webapp
        run: npm ci

      - name: Run ESLint
        working-directory: ./webapp
        run: npm run lint || true

      - name: Run Prettier check
        working-directory: ./webapp
        run: npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}" || true

  # Security scanning with multiple tools
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          ignore-unfixed: true

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=webapp/package.json

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-and-quality

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Dependency check
  dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'devsecops-health-dashboard'
          path: './webapp'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 7

      - name: Upload OWASP results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-check-report
          path: reports/

  # Build and test application
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [code-quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: webapp/package-lock.json

      - name: Install dependencies
        working-directory: ./webapp
        run: npm ci

      - name: Create required directories
        working-directory: ./webapp
        run: |
          mkdir -p public
          echo '<!DOCTYPE html><html><head><title>Health Dashboard</title></head><body><div id="root"></div></body></html>' > public/index.html

      - name: Run tests
        working-directory: ./webapp
        run: |
          npm test -- --coverage --watchAll=false || true
          
      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: webapp/coverage/

  # Container security scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: [build-and-test]
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create required directories for Docker build
        working-directory: ./webapp
        run: |
          mkdir -p public
          echo '<!DOCTYPE html><html><head><title>Health Dashboard</title></head><body><div id="root"></div></body></html>' > public/index.html

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: ./webapp
          push: false
          load: true
          tags: ${{ env.IMAGE_NAME }}:scanning
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:scanning
          format: 'sarif'
          output: 'container-scan-results.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true

      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'container-scan-results.sarif'

      - name: Run Grype container scan
        uses: anchore/scan-action@v3
        with:
          image: ${{ env.IMAGE_NAME }}:scanning
          fail-build: false
          severity-cutoff: high

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        if: github.event_name != 'pull_request'
        with:
          context: ./webapp
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Infrastructure as Code scanning
  iac-scan:
    name: IaC Security Scan
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'push' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkov scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          quiet: true
          soft_fail: true
          framework: all
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif

      - name: Terrascan IaC scan
        uses: tenable/terrascan-action@main
        with:
          iac_type: 'k8s'
          iac_version: 'v1'
          policy_type: 'k8s'
          only_warn: true

  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # DAST scanning (runs only on main branch)
  dast-scan:
    name: Dynamic Application Security Testing
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [container-scan]
    services:
      webapp:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
        ports:
          - 3000:3000
    steps:
      - name: Wait for application to be ready
        run: |
          for i in {1..30}; do
            if curl -f http://localhost:3000/health; then
              echo "Application is ready"
              break
            fi
            echo "Waiting for application... ($i/30)"
            sleep 5
          done

      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j -l WARN'

      - name: Upload ZAP results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-scan-report
          path: report_html.html

  # Compliance check
  compliance-check:
    name: Compliance and Policy Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Open Policy Agent tests
        run: |
          docker run --rm -v "$PWD":/project openpolicyagent/opa test /project/policies || true

      - name: License compliance check
        uses: fossa-contrib/fossa-action@v2
        continue-on-error: true
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}

  # Security report generation
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    if: always()
    needs: [security-scan, container-scan, iac-scan, secret-scan, dependency-check]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-reports

      - name: Generate consolidated report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "Date: $(date)" >> security-report.md
          echo "Repository: ${{ github.repository }}" >> security-report.md
          echo "Branch: ${{ github.ref }}" >> security-report.md
          echo "Commit: ${{ github.sha }}" >> security-report.md
          echo "" >> security-report.md
          echo "## Scan Results Summary" >> security-report.md
          echo "- ✅ Completed security scans" >> security-report.md
          echo "- 📊 Reports available in artifacts" >> security-report.md
          
      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-summary-report
          path: security-report.md

  # Deployment (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [container-scan, security-scan, compliance-check]
    environment:
      name: production
      url: https://health-dashboard.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Kubernetes
        run: |
          echo "Deploying to production..."
          # Add your actual deployment commands here
          # kubectl apply -f k8s/
          
      - name: Verify deployment
        run: |
          echo "Verifying deployment..."
          # Add deployment verification steps

      - name: Run post-deployment tests
        run: |
          echo "Running smoke tests..."
          # Add smoke test commands

  # Notification job
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    if: always()
    needs: [security-scan, container-scan, deploy]
    steps:
      - name: Send Slack notification
        if: ${{ secrets.SLACK_WEBHOOK_URL != '' }}
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Pipeline Status: ${{ job.status }}
            Workflow: ${{ github.workflow }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}